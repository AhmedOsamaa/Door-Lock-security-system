
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002132  000021c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  000021d6  2**0
                  ALLOC
  3 .stab         00002394  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001381  00000000  00000000  0000456c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000058ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000077e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000086d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000095e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000986d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a03b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_3>
      10:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_8>
      24:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 97 10 	jmp	0x212e	; 0x212e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
volatile uint8 recievedValue;



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 failed = 0;
     b5a:	1a 82       	std	Y+2, r1	; 0x02
	 * One stop bit
	 * 8 bit data
	*/

	/*Enabling Interrupts*/
	SREG |= (1<<7);
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24


	UART_Config config_u = {ONE_BIT_STOP, EIGHT_BIT_MODE, PARITY_OFF, 9600};
     b6a:	ce 01       	movw	r24, r28
     b6c:	03 96       	adiw	r24, 0x03	; 3
     b6e:	9d 87       	std	Y+13, r25	; 0x0d
     b70:	8c 87       	std	Y+12, r24	; 0x0c
     b72:	e8 e6       	ldi	r30, 0x68	; 104
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	ff 87       	std	Y+15, r31	; 0x0f
     b78:	ee 87       	std	Y+14, r30	; 0x0e
     b7a:	f7 e0       	ldi	r31, 0x07	; 7
     b7c:	f8 8b       	std	Y+16, r31	; 0x10
     b7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     b80:	ff 85       	ldd	r31, Y+15	; 0x0f
     b82:	00 80       	ld	r0, Z
     b84:	8e 85       	ldd	r24, Y+14	; 0x0e
     b86:	9f 85       	ldd	r25, Y+15	; 0x0f
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f 87       	std	Y+15, r25	; 0x0f
     b8c:	8e 87       	std	Y+14, r24	; 0x0e
     b8e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b90:	fd 85       	ldd	r31, Y+13	; 0x0d
     b92:	00 82       	st	Z, r0
     b94:	8c 85       	ldd	r24, Y+12	; 0x0c
     b96:	9d 85       	ldd	r25, Y+13	; 0x0d
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	9d 87       	std	Y+13, r25	; 0x0d
     b9c:	8c 87       	std	Y+12, r24	; 0x0c
     b9e:	98 89       	ldd	r25, Y+16	; 0x10
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	98 8b       	std	Y+16, r25	; 0x10
     ba4:	e8 89       	ldd	r30, Y+16	; 0x10
     ba6:	ee 23       	and	r30, r30
     ba8:	51 f7       	brne	.-44     	; 0xb7e <main+0x38>
	UART_init(&config_u);
     baa:	ce 01       	movw	r24, r28
     bac:	03 96       	adiw	r24, 0x03	; 3
     bae:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <UART_init>




	/*Initializing the motor*/
	DcMotor_init();
     bb2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <DcMotor_init>

	/*Initializing the Buzzer*/
	BUZZER_init();
     bb6:	0e 94 a0 07 	call	0xf40	; 0xf40 <BUZZER_init>

	/*Initializing the I2C with
	 * bit rate of 100k
	 * address 1
	 * */
	twi_config I2C_config = {Btr_400k,0b00000010};
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	8a 87       	std	Y+10, r24	; 0x0a
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	8b 87       	std	Y+11, r24	; 0x0b
	TWI_init(&I2C_config);
     bc2:	ce 01       	movw	r24, r28
     bc4:	0a 96       	adiw	r24, 0x0a	; 10
     bc6:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <TWI_init>




	/*Receive the value of the password from MC1*/
	UART_receiveString(val);
     bca:	8d e7       	ldi	r24, 0x7D	; 125
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <UART_receiveString>

	/*Save the Password received from MC1*/
	Save_data(val);
     bd2:	8d e7       	ldi	r24, 0x7D	; 125
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 42 06 	call	0xc84	; 0xc84 <Save_data>

	for(;;)
	{
		/*Receives the password from MC1*/
		UART_receiveString(val);
     bda:	8d e7       	ldi	r24, 0x7D	; 125
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <UART_receiveString>

		/*Checks if the password matches the one stored*/
		if(check_data(val))
     be2:	8d e7       	ldi	r24, 0x7D	; 125
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <check_data>
     bea:	88 23       	and	r24, r24
     bec:	89 f1       	breq	.+98     	; 0xc50 <main+0x10a>
		{
			/*Reset the number of failed attempts*/
			failed = 0;
     bee:	1a 82       	std	Y+2, r1	; 0x02

			/*Sends to MC1 that the password was a match*/
			UART_sendByte(SUCCESS);
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
			/*Receives from MC1 the desired operation
			 * either to unlock the door or to change the password*/
			operation = UART_receiveByte();
     bf6:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <UART_receiveByte>
     bfa:	89 83       	std	Y+1, r24	; 0x01

			/*If the desired operation is to unlock the door*/
			if(operation == DOOR)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	b9 f4       	brne	.+46     	; 0xc30 <main+0xea>
			{
				/*Reset the operation variable for the next iteration*/
				operation = 0;
     c02:	19 82       	std	Y+1, r1	; 0x01

				/*Starts timer1 with UnlockDoor as call back function
				 * and 8000 as the timer compare value which is 1 second*/
				ActivateTimer1(8000, UnlockDoor);
     c04:	2b e5       	ldi	r18, 0x5B	; 91
     c06:	37 e0       	ldi	r19, 0x07	; 7
     c08:	80 e4       	ldi	r24, 0x40	; 64
     c0a:	9f e1       	ldi	r25, 0x1F	; 31
     c0c:	b9 01       	movw	r22, r18
     c0e:	0e 94 2b 07 	call	0xe56	; 0xe56 <ActivateTimer1>

				/*After 17 seconds send a signal to MC1 that the door is unlocked
				 * and wait for the mentioned time before doing so*/
				while(ticks < 17);
     c12:	80 91 83 00 	lds	r24, 0x0083
     c16:	81 31       	cpi	r24, 0x11	; 17
     c18:	e0 f3       	brcs	.-8      	; 0xc12 <main+0xcc>
				UART_sendByte(COMPLETE);
     c1a:	86 e3       	ldi	r24, 0x36	; 54
     c1c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>

				/*After 33 seconds send a signal to MC1 that the process has finished */
				while(ticks != 33);
     c20:	80 91 83 00 	lds	r24, 0x0083
     c24:	81 32       	cpi	r24, 0x21	; 33
     c26:	e1 f7       	brne	.-8      	; 0xc20 <main+0xda>
				UART_sendByte(COMPLETE);
     c28:	86 e3       	ldi	r24, 0x36	; 54
     c2a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
     c2e:	16 c0       	rjmp	.+44     	; 0xc5c <main+0x116>
			}
			else if(operation == CHANGE_PASS )
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	88 30       	cpi	r24, 0x08	; 8
     c34:	99 f4       	brne	.+38     	; 0xc5c <main+0x116>
			{
				/*Reset the operation variable for the next iteration*/
				operation = 0;
     c36:	19 82       	std	Y+1, r1	; 0x01
				/*Receives the password from MC1*/
				UART_receiveString(val);
     c38:	8d e7       	ldi	r24, 0x7D	; 125
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <UART_receiveString>
				/*Save the Password received from MC1*/
				Save_data(val);
     c40:	8d e7       	ldi	r24, 0x7D	; 125
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 42 06 	call	0xc84	; 0xc84 <Save_data>
				/*send a signal to MC1 that the process has finished*/
				UART_sendByte(COMPLETE);
     c48:	86 e3       	ldi	r24, 0x36	; 54
     c4a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <main+0x116>
			}
		}
		/*if the password doesn't match inform MC1 and increment the number of failed attempts */
		else
		{
			UART_sendByte(FAILURE);
     c50:	89 e8       	ldi	r24, 0x89	; 137
     c52:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
			failed++;
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	8a 83       	std	Y+2, r24	; 0x02
		}

		/*if the number of failed attempts reaches 3 activate the alarm and reset the number*/
		if(failed == 3)
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	83 30       	cpi	r24, 0x03	; 3
     c60:	09 f0       	breq	.+2      	; 0xc64 <main+0x11e>
     c62:	bb cf       	rjmp	.-138    	; 0xbda <main+0x94>
		{
			failed = 0;
     c64:	1a 82       	std	Y+2, r1	; 0x02
			ActivateTimer1(8000, alarm);
     c66:	25 e8       	ldi	r18, 0x85	; 133
     c68:	37 e0       	ldi	r19, 0x07	; 7
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	9f e1       	ldi	r25, 0x1F	; 31
     c6e:	b9 01       	movw	r22, r18
     c70:	0e 94 2b 07 	call	0xe56	; 0xe56 <ActivateTimer1>
			while(ticks != 10);
     c74:	80 91 83 00 	lds	r24, 0x0083
     c78:	8a 30       	cpi	r24, 0x0A	; 10
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <main+0x12e>
			/*Inform MC1 that the buzzer is OFF now*/
			UART_sendByte(COMPLETE);
     c7c:	86 e3       	ldi	r24, 0x36	; 54
     c7e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
     c82:	ab cf       	rjmp	.-170    	; 0xbda <main+0x94>

00000c84 <Save_data>:
		}
	}
}

void Save_data(char *data)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	61 97       	sbiw	r28, 0x11	; 17
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	99 8b       	std	Y+17, r25	; 0x11
     c9a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i ;
	for(i = 0; i < 5; i++ )
     c9c:	1f 86       	std	Y+15, r1	; 0x0f
     c9e:	87 c0       	rjmp	.+270    	; 0xdae <Save_data+0x12a>
	{
		EEPROM_writeByte(ADDRESS + i, data[i]);
     ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca2:	88 2f       	mov	r24, r24
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	44 96       	adiw	r24, 0x14	; 20
     ca8:	ac 01       	movw	r20, r24
     caa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	88 89       	ldd	r24, Y+16	; 0x10
     cb2:	99 89       	ldd	r25, Y+17	; 0x11
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	20 81       	ld	r18, Z
     cbc:	ca 01       	movw	r24, r20
     cbe:	62 2f       	mov	r22, r18
     cc0:	0e 94 c9 07 	call	0xf92	; 0xf92 <EEPROM_writeByte>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e2       	ldi	r26, 0x20	; 32
     cca:	b1 e4       	ldi	r27, 0x41	; 65
     ccc:	8b 87       	std	Y+11, r24	; 0x0b
     cce:	9c 87       	std	Y+12, r25	; 0x0c
     cd0:	ad 87       	std	Y+13, r26	; 0x0d
     cd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cda:	9e 85       	ldd	r25, Y+14	; 0x0e
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a ef       	ldi	r20, 0xFA	; 250
     ce2:	54 e4       	ldi	r21, 0x44	; 68
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8f 83       	std	Y+7, r24	; 0x07
     cee:	98 87       	std	Y+8, r25	; 0x08
     cf0:	a9 87       	std	Y+9, r26	; 0x09
     cf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	2c f4       	brge	.+10     	; 0xd16 <Save_data+0x92>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9e 83       	std	Y+6, r25	; 0x06
     d12:	8d 83       	std	Y+5, r24	; 0x05
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <Save_data+0x110>
	else if (__tmp > 65535)
     d16:	6f 81       	ldd	r22, Y+7	; 0x07
     d18:	78 85       	ldd	r23, Y+8	; 0x08
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	4c f5       	brge	.+82     	; 0xd80 <Save_data+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d30:	7c 85       	ldd	r23, Y+12	; 0x0c
     d32:	8d 85       	ldd	r24, Y+13	; 0x0d
     d34:	9e 85       	ldd	r25, Y+14	; 0x0e
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9e 83       	std	Y+6, r25	; 0x06
     d54:	8d 83       	std	Y+5, r24	; 0x05
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <Save_data+0xf2>
     d58:	88 ec       	ldi	r24, 0xC8	; 200
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	9c 81       	ldd	r25, Y+4	; 0x04
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <Save_data+0xe0>
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f7       	brne	.-38     	; 0xd58 <Save_data+0xd4>
     d7e:	14 c0       	rjmp	.+40     	; 0xda8 <Save_data+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	6f 81       	ldd	r22, Y+7	; 0x07
     d82:	78 85       	ldd	r23, Y+8	; 0x08
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <Save_data+0x11c>
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	89 83       	std	Y+1, r24	; 0x01
}

void Save_data(char *data)
{
	uint8 i ;
	for(i = 0; i < 5; i++ )
     da8:	8f 85       	ldd	r24, Y+15	; 0x0f
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	8f 87       	std	Y+15, r24	; 0x0f
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <Save_data+0x132>
     db4:	75 cf       	rjmp	.-278    	; 0xca0 <Save_data+0x1c>
	{
		EEPROM_writeByte(ADDRESS + i, data[i]);
		/*Delay required by the eeprom to store data*/
		_delay_ms(10);
	}
}
     db6:	61 96       	adiw	r28, 0x11	; 17
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <check_data>:

uint8 check_data(char *compared_data)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	29 97       	sbiw	r28, 0x09	; 9
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	98 87       	std	Y+8, r25	; 0x08
     dde:	8f 83       	std	Y+7, r24	; 0x07

	uint8 rx_data[5];
	uint8 i ;
	/*read the stored password from the eeprom and compare it to the received one*/
	for(i = 0; i < 5; i++ )
     de0:	19 82       	std	Y+1, r1	; 0x01
     de2:	2a c0       	rjmp	.+84     	; 0xe38 <check_data+0x70>
	{
		EEPROM_readByte(ADDRESS + i, &rx_data[i]);
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	44 96       	adiw	r24, 0x14	; 20
     dec:	ac 01       	movw	r20, r24
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9e 01       	movw	r18, r28
     df6:	2e 5f       	subi	r18, 0xFE	; 254
     df8:	3f 4f       	sbci	r19, 0xFF	; 255
     dfa:	28 0f       	add	r18, r24
     dfc:	39 1f       	adc	r19, r25
     dfe:	ca 01       	movw	r24, r20
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 0a 08 	call	0x1014	; 0x1014 <EEPROM_readByte>
		if(rx_data[i] != compared_data[i])
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	ce 01       	movw	r24, r28
     e0e:	02 96       	adiw	r24, 0x02	; 2
     e10:	fc 01       	movw	r30, r24
     e12:	e2 0f       	add	r30, r18
     e14:	f3 1f       	adc	r31, r19
     e16:	40 81       	ld	r20, Z
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	fc 01       	movw	r30, r24
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	80 81       	ld	r24, Z
     e2a:	48 17       	cp	r20, r24
     e2c:	11 f0       	breq	.+4      	; 0xe32 <check_data+0x6a>
			return 0;
     e2e:	19 86       	std	Y+9, r1	; 0x09
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <check_data+0x7a>
{

	uint8 rx_data[5];
	uint8 i ;
	/*read the stored password from the eeprom and compare it to the received one*/
	for(i = 0; i < 5; i++ )
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	98 f2       	brcs	.-90     	; 0xde4 <check_data+0x1c>
	{
		EEPROM_readByte(ADDRESS + i, &rx_data[i]);
		if(rx_data[i] != compared_data[i])
			return 0;
	}
	return 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 87       	std	Y+9, r24	; 0x09
     e42:	89 85       	ldd	r24, Y+9	; 0x09
}
     e44:	29 96       	adiw	r28, 0x09	; 9
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <ActivateTimer1>:


void ActivateTimer1(uint16 period, void (*func_ptr)(void))
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	2b 97       	sbiw	r28, 0x0b	; 11
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	99 87       	std	Y+9, r25	; 0x09
     e6c:	88 87       	std	Y+8, r24	; 0x08
     e6e:	7b 87       	std	Y+11, r23	; 0x0b
     e70:	6a 87       	std	Y+10, r22	; 0x0a
	/*Reset the ticks every time the function is called*/
	ticks = 0;
     e72:	10 92 83 00 	sts	0x0083, r1
	 * mode: compare mode
	 * initial value: 0
	 * compare value: will be passed
	 * frequency: FCPU_1024
	 * */
	timer_config config = {TIMER1, CTC, 0, period, FCPU_1024 };
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	1c 82       	std	Y+4, r1	; 0x04
     e80:	1b 82       	std	Y+3, r1	; 0x03
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	99 85       	ldd	r25, Y+9	; 0x09
     e86:	9e 83       	std	Y+6, r25	; 0x06
     e88:	8d 83       	std	Y+5, r24	; 0x05
     e8a:	85 e0       	ldi	r24, 0x05	; 5
     e8c:	8f 83       	std	Y+7, r24	; 0x07
	/*set timer1's call back function*/
	TIMER_setCallBack(TIMER1, CTC, func_ptr);
     e8e:	2a 85       	ldd	r18, Y+10	; 0x0a
     e90:	3b 85       	ldd	r19, Y+11	; 0x0b
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	a9 01       	movw	r20, r18
     e98:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TIMER_setCallBack>
	/*initialize timer1*/
	TIMER_init(&config);
     e9c:	ce 01       	movw	r24, r28
     e9e:	01 96       	adiw	r24, 0x01	; 1
     ea0:	0e 94 1f 0c 	call	0x183e	; 0x183e <TIMER_init>
}
     ea4:	2b 96       	adiw	r28, 0x0b	; 11
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <UnlockDoor>:

void UnlockDoor()
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	/*rotate the motor to the left for the first 15 seconds*/
	if(ticks == 0)
     ebe:	80 91 83 00 	lds	r24, 0x0083
     ec2:	88 23       	and	r24, r24
     ec4:	19 f4       	brne	.+6      	; 0xecc <UnlockDoor+0x16>
		DcMotor_rotateLeft();
     ec6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <DcMotor_rotateLeft>
     eca:	17 c0       	rjmp	.+46     	; 0xefa <UnlockDoor+0x44>
	/*after 15 seconds turn the motor off for 3 seconds*/
	else if((ticks == 15))
     ecc:	80 91 83 00 	lds	r24, 0x0083
     ed0:	8f 30       	cpi	r24, 0x0F	; 15
     ed2:	19 f4       	brne	.+6      	; 0xeda <UnlockDoor+0x24>
		 DcMotor_off();
     ed4:	0e 94 0e 0c 	call	0x181c	; 0x181c <DcMotor_off>
     ed8:	10 c0       	rjmp	.+32     	; 0xefa <UnlockDoor+0x44>
	/*rotate the motor right for 18 seconds*/
	else if(ticks == 18)
     eda:	80 91 83 00 	lds	r24, 0x0083
     ede:	82 31       	cpi	r24, 0x12	; 18
     ee0:	19 f4       	brne	.+6      	; 0xee8 <UnlockDoor+0x32>
		 DcMotor_rotateRight();
     ee2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <DcMotor_rotateRight>
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <UnlockDoor+0x44>
	/*turn the motor off and de-initialize tiemr1*/
	else if (ticks == 33)
     ee8:	80 91 83 00 	lds	r24, 0x0083
     eec:	81 32       	cpi	r24, 0x21	; 33
     eee:	29 f4       	brne	.+10     	; 0xefa <UnlockDoor+0x44>
	{
		DcMotor_off();
     ef0:	0e 94 0e 0c 	call	0x181c	; 0x181c <DcMotor_off>
		TIMER_deInit(TIMER1);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_deInit>
	}
	ticks++;
     efa:	80 91 83 00 	lds	r24, 0x0083
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 83 00 	sts	0x0083, r24
}
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <alarm>:

void alarm()
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
	/*turn the buzzer ON for 10 seconds*/
	if(ticks == 0)
     f12:	80 91 83 00 	lds	r24, 0x0083
     f16:	88 23       	and	r24, r24
     f18:	11 f4       	brne	.+4      	; 0xf1e <alarm+0x14>
		BUZZER_ON();
     f1a:	0e 94 b1 07 	call	0xf62	; 0xf62 <BUZZER_ON>
	/*turn the buzzer OFF and de-initialaize timer1*/
	if(ticks == 9)
     f1e:	80 91 83 00 	lds	r24, 0x0083
     f22:	89 30       	cpi	r24, 0x09	; 9
     f24:	29 f4       	brne	.+10     	; 0xf30 <alarm+0x26>
	{
		BUZZER_OFF();
     f26:	0e 94 bd 07 	call	0xf7a	; 0xf7a <BUZZER_OFF>
		TIMER_deInit(TIMER1);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_deInit>
	}
	ticks++;
     f30:	80 91 83 00 	lds	r24, 0x0083
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	80 93 83 00 	sts	0x0083, r24

}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <BUZZER_init>:

#include "buzzer.h"
#include "gpio.h"

void BUZZER_init()
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
	/*Setup the Pin direction as output and make the initial output zero so the buzzer is'nt fired on*/
	GPIO_setupPinDirection(BUZ_PORT_ID, BUZ_PIN_ID, PIN_OUTPUT);
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	64 e0       	ldi	r22, 0x04	; 4
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_setupPinDirection>
	GPIO_writePin(BUZ_PORT_ID, BUZ_PIN_ID, LOGIC_LOW);
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	64 e0       	ldi	r22, 0x04	; 4
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <BUZZER_ON>:

void BUZZER_ON()
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	/*The buzzer's pin is logic high so the buzzer fired on*/
	GPIO_writePin(BUZ_PORT_ID, BUZ_PIN_ID, LOGIC_HIGH);
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <BUZZER_OFF>:

void BUZZER_OFF()
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
	/*The buzzer's pin is logic low so the buzzer turned off*/
	GPIO_writePin(BUZ_PORT_ID, BUZ_PIN_ID, LOGIC_LOW);
     f82:	83 e0       	ldi	r24, 0x03	; 3
     f84:	64 e0       	ldi	r22, 0x04	; 4
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <EEPROM_writeByte>:
 */
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <EEPROM_writeByte+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <EEPROM_writeByte+0x8>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     fa4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     fa8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	11 f0       	breq	.+4      	; 0xfb4 <EEPROM_writeByte+0x22>
        return ERROR;
     fb0:	1c 82       	std	Y+4, r1	; 0x04
     fb2:	28 c0       	rjmp	.+80     	; 0x1004 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	80 70       	andi	r24, 0x00	; 0
     fba:	97 70       	andi	r25, 0x07	; 7
     fbc:	88 0f       	add	r24, r24
     fbe:	89 2f       	mov	r24, r25
     fc0:	88 1f       	adc	r24, r24
     fc2:	99 0b       	sbc	r25, r25
     fc4:	91 95       	neg	r25
     fc6:	80 6a       	ori	r24, 0xA0	; 160
     fc8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fcc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
     fd0:	88 31       	cpi	r24, 0x18	; 24
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <EEPROM_writeByte+0x46>
        return ERROR;
     fd4:	1c 82       	std	Y+4, r1	; 0x04
     fd6:	16 c0       	rjmp	.+44     	; 0x1004 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fde:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
     fe2:	88 32       	cpi	r24, 0x28	; 40
     fe4:	11 f0       	breq	.+4      	; 0xfea <EEPROM_writeByte+0x58>
        return ERROR;
     fe6:	1c 82       	std	Y+4, r1	; 0x04
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ff0:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
     ff4:	88 32       	cpi	r24, 0x28	; 40
     ff6:	11 f0       	breq	.+4      	; 0xffc <EEPROM_writeByte+0x6a>
        return ERROR;
     ff8:	1c 82       	std	Y+4, r1	; 0x04
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     ffc:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <TWI_stop>

    return SUCCESS;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	8c 83       	std	Y+4, r24	; 0x04
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <EEPROM_readByte+0x6>
    101a:	00 d0       	rcall	.+0      	; 0x101c <EEPROM_readByte+0x8>
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	7c 83       	std	Y+4, r23	; 0x04
    1028:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    102a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    102e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	11 f0       	breq	.+4      	; 0x103a <EEPROM_readByte+0x26>
        return ERROR;
    1036:	1d 82       	std	Y+5, r1	; 0x05
    1038:	44 c0       	rjmp	.+136    	; 0x10c2 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	80 70       	andi	r24, 0x00	; 0
    1040:	97 70       	andi	r25, 0x07	; 7
    1042:	88 0f       	add	r24, r24
    1044:	89 2f       	mov	r24, r25
    1046:	88 1f       	adc	r24, r24
    1048:	99 0b       	sbc	r25, r25
    104a:	91 95       	neg	r25
    104c:	80 6a       	ori	r24, 0xA0	; 160
    104e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1052:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    1056:	88 31       	cpi	r24, 0x18	; 24
    1058:	11 f0       	breq	.+4      	; 0x105e <EEPROM_readByte+0x4a>
        return ERROR;
    105a:	1d 82       	std	Y+5, r1	; 0x05
    105c:	32 c0       	rjmp	.+100    	; 0x10c2 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1064:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    1068:	88 32       	cpi	r24, 0x28	; 40
    106a:	11 f0       	breq	.+4      	; 0x1070 <EEPROM_readByte+0x5c>
        return ERROR;
    106c:	1d 82       	std	Y+5, r1	; 0x05
    106e:	29 c0       	rjmp	.+82     	; 0x10c2 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1070:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1074:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    1078:	80 31       	cpi	r24, 0x10	; 16
    107a:	11 f0       	breq	.+4      	; 0x1080 <EEPROM_readByte+0x6c>
        return ERROR;
    107c:	1d 82       	std	Y+5, r1	; 0x05
    107e:	21 c0       	rjmp	.+66     	; 0x10c2 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	80 70       	andi	r24, 0x00	; 0
    1086:	97 70       	andi	r25, 0x07	; 7
    1088:	88 0f       	add	r24, r24
    108a:	89 2f       	mov	r24, r25
    108c:	88 1f       	adc	r24, r24
    108e:	99 0b       	sbc	r25, r25
    1090:	91 95       	neg	r25
    1092:	81 6a       	ori	r24, 0xA1	; 161
    1094:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1098:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    109c:	80 34       	cpi	r24, 0x40	; 64
    109e:	11 f0       	breq	.+4      	; 0x10a4 <EEPROM_readByte+0x90>
        return ERROR;
    10a0:	1d 82       	std	Y+5, r1	; 0x05
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    10a4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_readByteWithNACK>
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    10ae:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <TWI_getStatus>
    10b2:	88 35       	cpi	r24, 0x58	; 88
    10b4:	11 f0       	breq	.+4      	; 0x10ba <EEPROM_readByte+0xa6>
        return ERROR;
    10b6:	1d 82       	std	Y+5, r1	; 0x05
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    10ba:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <TWI_stop>

    return SUCCESS;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	8d 83       	std	Y+5, r24	; 0x05
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <GPIO_setupPinDirection+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_setupPinDirection+0x8>
    10dc:	0f 92       	push	r0
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6a 83       	std	Y+2, r22	; 0x02
    10e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 30       	cpi	r24, 0x08	; 8
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <GPIO_setupPinDirection+0x1c>
    10ee:	d5 c0       	rjmp	.+426    	; 0x129a <GPIO_setupPinDirection+0x1c6>
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <GPIO_setupPinDirection+0x24>
    10f6:	d1 c0       	rjmp	.+418    	; 0x129a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3d 83       	std	Y+5, r19	; 0x05
    1100:	2c 83       	std	Y+4, r18	; 0x04
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <GPIO_setupPinDirection+0x3a>
    110c:	43 c0       	rjmp	.+134    	; 0x1194 <GPIO_setupPinDirection+0xc0>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <GPIO_setupPinDirection+0x4e>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	71 f0       	breq	.+28     	; 0x113c <GPIO_setupPinDirection+0x68>
    1120:	bc c0       	rjmp	.+376    	; 0x129a <GPIO_setupPinDirection+0x1c6>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <GPIO_setupPinDirection+0x5a>
    112c:	5f c0       	rjmp	.+190    	; 0x11ec <GPIO_setupPinDirection+0x118>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <GPIO_setupPinDirection+0x66>
    1138:	85 c0       	rjmp	.+266    	; 0x1244 <GPIO_setupPinDirection+0x170>
    113a:	af c0       	rjmp	.+350    	; 0x129a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	a1 f4       	brne	.+40     	; 0x116a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1142:	aa e3       	ldi	r26, 0x3A	; 58
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ea e3       	ldi	r30, 0x3A	; 58
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_setupPinDirection+0x8c>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_setupPinDirection+0x88>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	98 c0       	rjmp	.+304    	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0xb4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0xb0>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	83 c0       	rjmp	.+262    	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	a1 f4       	brne	.+40     	; 0x11c2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    119a:	a7 e3       	ldi	r26, 0x37	; 55
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e7 e3       	ldi	r30, 0x37	; 55
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_setupPinDirection+0xe4>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_setupPinDirection+0xe0>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	6c c0       	rjmp	.+216    	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11c2:	a7 e3       	ldi	r26, 0x37	; 55
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e7 e3       	ldi	r30, 0x37	; 55
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_setupPinDirection+0x10c>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_setupPinDirection+0x108>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	57 c0       	rjmp	.+174    	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	a1 f4       	brne	.+40     	; 0x121a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11f2:	a4 e3       	ldi	r26, 0x34	; 52
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_setupPinDirection+0x13c>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_setupPinDirection+0x138>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	40 c0       	rjmp	.+128    	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    121a:	a4 e3       	ldi	r26, 0x34	; 52
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e4 e3       	ldi	r30, 0x34	; 52
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_setupPinDirection+0x164>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_setupPinDirection+0x160>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	2b c0       	rjmp	.+86     	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	a1 f4       	brne	.+40     	; 0x1272 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_setupPinDirection+0x194>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_setupPinDirection+0x190>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	14 c0       	rjmp	.+40     	; 0x129a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1272:	a1 e3       	ldi	r26, 0x31	; 49
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e1 e3       	ldi	r30, 0x31	; 49
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_setupPinDirection+0x1bc>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_setupPinDirection+0x1b8>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <GPIO_writePin+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_writePin+0x8>
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
    12bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <GPIO_writePin+0x1c>
    12c4:	d5 c0       	rjmp	.+426    	; 0x1470 <GPIO_writePin+0x1c6>
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <GPIO_writePin+0x24>
    12cc:	d1 c0       	rjmp	.+418    	; 0x1470 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3d 83       	std	Y+5, r19	; 0x05
    12d6:	2c 83       	std	Y+4, r18	; 0x04
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <GPIO_writePin+0x3a>
    12e2:	43 c0       	rjmp	.+134    	; 0x136a <GPIO_writePin+0xc0>
    12e4:	2c 81       	ldd	r18, Y+4	; 0x04
    12e6:	3d 81       	ldd	r19, Y+5	; 0x05
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <GPIO_writePin+0x4e>
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	71 f0       	breq	.+28     	; 0x1312 <GPIO_writePin+0x68>
    12f6:	bc c0       	rjmp	.+376    	; 0x1470 <GPIO_writePin+0x1c6>
    12f8:	2c 81       	ldd	r18, Y+4	; 0x04
    12fa:	3d 81       	ldd	r19, Y+5	; 0x05
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <GPIO_writePin+0x5a>
    1302:	5f c0       	rjmp	.+190    	; 0x13c2 <GPIO_writePin+0x118>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	09 f4       	brne	.+2      	; 0x1310 <GPIO_writePin+0x66>
    130e:	85 c0       	rjmp	.+266    	; 0x141a <GPIO_writePin+0x170>
    1310:	af c0       	rjmp	.+350    	; 0x1470 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	a1 f4       	brne	.+40     	; 0x1340 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1318:	ab e3       	ldi	r26, 0x3B	; 59
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	eb e3       	ldi	r30, 0x3B	; 59
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <GPIO_writePin+0x8c>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <GPIO_writePin+0x88>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	98 c0       	rjmp	.+304    	; 0x1470 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1340:	ab e3       	ldi	r26, 0x3B	; 59
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	eb e3       	ldi	r30, 0x3B	; 59
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0xb4>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0xb0>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	83 c0       	rjmp	.+262    	; 0x1470 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	a1 f4       	brne	.+40     	; 0x1398 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <GPIO_writePin+0xe4>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <GPIO_writePin+0xe0>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	6c c0       	rjmp	.+216    	; 0x1470 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <GPIO_writePin+0x10c>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <GPIO_writePin+0x108>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	57 c0       	rjmp	.+174    	; 0x1470 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	a1 f4       	brne	.+40     	; 0x13f0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13c8:	a5 e3       	ldi	r26, 0x35	; 53
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e5 e3       	ldi	r30, 0x35	; 53
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <GPIO_writePin+0x13c>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <GPIO_writePin+0x138>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13f0:	a5 e3       	ldi	r26, 0x35	; 53
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e3       	ldi	r30, 0x35	; 53
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <GPIO_writePin+0x164>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <GPIO_writePin+0x160>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	2b c0       	rjmp	.+86     	; 0x1470 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_writePin+0x194>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_writePin+0x190>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	14 c0       	rjmp	.+40     	; 0x1470 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_writePin+0x1bc>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_writePin+0x1b8>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_readPin+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_readPin+0x8>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1492:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	08 f0       	brcs	.+2      	; 0x149c <GPIO_readPin+0x1c>
    149a:	84 c0       	rjmp	.+264    	; 0x15a4 <GPIO_readPin+0x124>
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <GPIO_readPin+0x24>
    14a2:	80 c0       	rjmp	.+256    	; 0x15a4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3d 83       	std	Y+5, r19	; 0x05
    14ac:	2c 83       	std	Y+4, r18	; 0x04
    14ae:	4c 81       	ldd	r20, Y+4	; 0x04
    14b0:	5d 81       	ldd	r21, Y+5	; 0x05
    14b2:	41 30       	cpi	r20, 0x01	; 1
    14b4:	51 05       	cpc	r21, r1
    14b6:	79 f1       	breq	.+94     	; 0x1516 <GPIO_readPin+0x96>
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	9d 81       	ldd	r25, Y+5	; 0x05
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	91 05       	cpc	r25, r1
    14c0:	34 f4       	brge	.+12     	; 0x14ce <GPIO_readPin+0x4e>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	21 15       	cp	r18, r1
    14c8:	31 05       	cpc	r19, r1
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <GPIO_readPin+0x66>
    14cc:	6b c0       	rjmp	.+214    	; 0x15a4 <GPIO_readPin+0x124>
    14ce:	4c 81       	ldd	r20, Y+4	; 0x04
    14d0:	5d 81       	ldd	r21, Y+5	; 0x05
    14d2:	42 30       	cpi	r20, 0x02	; 2
    14d4:	51 05       	cpc	r21, r1
    14d6:	b9 f1       	breq	.+110    	; 0x1546 <GPIO_readPin+0xc6>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <GPIO_readPin+0x64>
    14e2:	49 c0       	rjmp	.+146    	; 0x1576 <GPIO_readPin+0xf6>
    14e4:	5f c0       	rjmp	.+190    	; 0x15a4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14e6:	e9 e3       	ldi	r30, 0x39	; 57
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a9 01       	movw	r20, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <GPIO_readPin+0x7e>
    14fa:	55 95       	asr	r21
    14fc:	47 95       	ror	r20
    14fe:	8a 95       	dec	r24
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <GPIO_readPin+0x7a>
    1502:	ca 01       	movw	r24, r20
    1504:	81 70       	andi	r24, 0x01	; 1
    1506:	90 70       	andi	r25, 0x00	; 0
    1508:	88 23       	and	r24, r24
    150a:	19 f0       	breq	.+6      	; 0x1512 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	49 c0       	rjmp	.+146    	; 0x15a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	47 c0       	rjmp	.+142    	; 0x15a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1516:	e6 e3       	ldi	r30, 0x36	; 54
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a9 01       	movw	r20, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_readPin+0xae>
    152a:	55 95       	asr	r21
    152c:	47 95       	ror	r20
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_readPin+0xaa>
    1532:	ca 01       	movw	r24, r20
    1534:	81 70       	andi	r24, 0x01	; 1
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	88 23       	and	r24, r24
    153a:	19 f0       	breq	.+6      	; 0x1542 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	31 c0       	rjmp	.+98     	; 0x15a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1542:	19 82       	std	Y+1, r1	; 0x01
    1544:	2f c0       	rjmp	.+94     	; 0x15a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1546:	e3 e3       	ldi	r30, 0x33	; 51
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a9 01       	movw	r20, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_readPin+0xde>
    155a:	55 95       	asr	r21
    155c:	47 95       	ror	r20
    155e:	8a 95       	dec	r24
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_readPin+0xda>
    1562:	ca 01       	movw	r24, r20
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	90 70       	andi	r25, 0x00	; 0
    1568:	88 23       	and	r24, r24
    156a:	19 f0       	breq	.+6      	; 0x1572 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	19 c0       	rjmp	.+50     	; 0x15a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1576:	e0 e3       	ldi	r30, 0x30	; 48
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_readPin+0x10e>
    158a:	55 95       	asr	r21
    158c:	47 95       	ror	r20
    158e:	8a 95       	dec	r24
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_readPin+0x10a>
    1592:	ca 01       	movw	r24, r20
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	90 70       	andi	r25, 0x00	; 0
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <GPIO_setupPortDirection+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <GPIO_setupPortDirection+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	90 f5       	brcc	.+100    	; 0x1630 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3c 83       	std	Y+4, r19	; 0x04
    15d4:	2b 83       	std	Y+3, r18	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	d1 f0       	breq	.+52     	; 0x1614 <GPIO_setupPortDirection+0x5e>
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <GPIO_setupPortDirection+0x3e>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <GPIO_setupPortDirection+0x54>
    15f2:	1e c0       	rjmp	.+60     	; 0x1630 <GPIO_setupPortDirection+0x7a>
    15f4:	2b 81       	ldd	r18, Y+3	; 0x03
    15f6:	3c 81       	ldd	r19, Y+4	; 0x04
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <GPIO_setupPortDirection+0x68>
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <GPIO_setupPortDirection+0x72>
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    160a:	ea e3       	ldi	r30, 0x3A	; 58
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1614:	e7 e3       	ldi	r30, 0x37	; 55
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    161e:	e4 e3       	ldi	r30, 0x34	; 52
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1628:	e1 e3       	ldi	r30, 0x31	; 49
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <GPIO_writePort+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <GPIO_writePort+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	90 f5       	brcc	.+100    	; 0x16b8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3c 83       	std	Y+4, r19	; 0x04
    165c:	2b 83       	std	Y+3, r18	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	91 05       	cpc	r25, r1
    1666:	d1 f0       	breq	.+52     	; 0x169c <GPIO_writePort+0x5e>
    1668:	2b 81       	ldd	r18, Y+3	; 0x03
    166a:	3c 81       	ldd	r19, Y+4	; 0x04
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	2c f4       	brge	.+10     	; 0x167c <GPIO_writePort+0x3e>
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	61 f0       	breq	.+24     	; 0x1692 <GPIO_writePort+0x54>
    167a:	1e c0       	rjmp	.+60     	; 0x16b8 <GPIO_writePort+0x7a>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <GPIO_writePort+0x68>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	83 30       	cpi	r24, 0x03	; 3
    168c:	91 05       	cpc	r25, r1
    168e:	81 f0       	breq	.+32     	; 0x16b0 <GPIO_writePort+0x72>
    1690:	13 c0       	rjmp	.+38     	; 0x16b8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1692:	eb e3       	ldi	r30, 0x3B	; 59
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	0e c0       	rjmp	.+28     	; 0x16b8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16b0:	e2 e3       	ldi	r30, 0x32	; 50
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_readPort+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <GPIO_readPort+0x8>
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16d4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	84 30       	cpi	r24, 0x04	; 4
    16da:	90 f5       	brcc	.+100    	; 0x1740 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3c 83       	std	Y+4, r19	; 0x04
    16e4:	2b 83       	std	Y+3, r18	; 0x03
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	d1 f0       	breq	.+52     	; 0x1724 <GPIO_readPort+0x5e>
    16f0:	2b 81       	ldd	r18, Y+3	; 0x03
    16f2:	3c 81       	ldd	r19, Y+4	; 0x04
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	2c f4       	brge	.+10     	; 0x1704 <GPIO_readPort+0x3e>
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	61 f0       	breq	.+24     	; 0x171a <GPIO_readPort+0x54>
    1702:	1e c0       	rjmp	.+60     	; 0x1740 <GPIO_readPort+0x7a>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	81 f0       	breq	.+32     	; 0x172e <GPIO_readPort+0x68>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	91 05       	cpc	r25, r1
    1716:	81 f0       	breq	.+32     	; 0x1738 <GPIO_readPort+0x72>
    1718:	13 c0       	rjmp	.+38     	; 0x1740 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    171a:	e9 e3       	ldi	r30, 0x39	; 57
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	0e c0       	rjmp	.+28     	; 0x1740 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1724:	e6 e3       	ldi	r30, 0x36	; 54
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    172e:	e3 e3       	ldi	r30, 0x33	; 51
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1738:	e0 e3       	ldi	r30, 0x30	; 48
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1740:	89 81       	ldd	r24, Y+1	; 0x01
}
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <DcMotor_init>:
#include "common_macros.h"
#include "gpio.h"


void DcMotor_init(void)
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62

	/*Configure the pins as output*/
	GPIO_setupPinDirection(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, PIN_OUTPUT);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, PIN_OUTPUT);
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_setupPinDirection>


	/*Motor is at rest initially*/
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_LOW);
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	62 e0       	ldi	r22, 0x02	; 2
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_LOW);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	63 e0       	ldi	r22, 0x03	; 3
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <DcMotor_rotate>:

void DcMotor_rotate(DcMotor_State state)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
	if(state == DcMotor_LEFT)
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	31 f4       	brne	.+12     	; 0x17a4 <DcMotor_rotate+0x1e>
		GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_HIGH);
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
    17a2:	16 c0       	rjmp	.+44     	; 0x17d0 <DcMotor_rotate+0x4a>
	else if(state == DcMotor_RIGHT)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	88 23       	and	r24, r24
    17a8:	31 f4       	brne	.+12     	; 0x17b6 <DcMotor_rotate+0x30>
		GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_HIGH);
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	63 e0       	ldi	r22, 0x03	; 3
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
    17b4:	0d c0       	rjmp	.+26     	; 0x17d0 <DcMotor_rotate+0x4a>
	else if(state == DcMotor_OFF)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	51 f4       	brne	.+20     	; 0x17d0 <DcMotor_rotate+0x4a>
	{
		GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_LOW);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	62 e0       	ldi	r22, 0x02	; 2
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
		GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_LOW);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	63 e0       	ldi	r22, 0x03	; 3
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <DcMotor_rotateLeft>:

void DcMotor_rotateLeft()
{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_LOW);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	63 e0       	ldi	r22, 0x03	; 3
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_HIGH);
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <DcMotor_rotateRight>:

void DcMotor_rotateRight()
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_LOW);
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_HIGH);
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	63 e0       	ldi	r22, 0x03	; 3
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <DcMotor_off>:

void DcMotor_off()
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin1_ID, LOGIC_LOW);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	62 e0       	ldi	r22, 0x02	; 2
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
	GPIO_writePin(DcMotor_inputPort_ID, DcMotor_inputPin2_ID, LOGIC_LOW);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	63 e0       	ldi	r22, 0x03	; 3
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 55 09 	call	0x12aa	; 0x12aa <GPIO_writePin>
}
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <TIMER_init>:
static volatile void(*CMP1_ptr)(void) = NULL_PTR;
static volatile void(*OVF2_ptr)(void) = NULL_PTR;
static volatile void(*CMP2_ptr)(void) = NULL_PTR;

void TIMER_init(timer_config* config)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <TIMER_init+0x6>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
	 * 3. set the compare value from OCR register
	 * 4. select the timer type from TCCR register
	 * 5. set the pre-scalers value from TCCR register
	 * 6. enable the timer's interrupt  whether the overflow or the compare one
	 */
	if(TIMER0 == config->timer)
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	80 81       	ld	r24, Z
    1852:	88 23       	and	r24, r24
    1854:	79 f5       	brne	.+94     	; 0x18b4 <TIMER_init+0x76>
	{
		TCNT0 = config->init_val;
    1856:	a2 e5       	ldi	r26, 0x52	; 82
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e9 81       	ldd	r30, Y+1	; 0x01
    185c:	fa 81       	ldd	r31, Y+2	; 0x02
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	8c 93       	st	X, r24
		OCR0 = config->comp_val;
    1864:	ac e5       	ldi	r26, 0x5C	; 92
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e9 81       	ldd	r30, Y+1	; 0x01
    186a:	fa 81       	ldd	r31, Y+2	; 0x02
    186c:	84 81       	ldd	r24, Z+4	; 0x04
    186e:	95 81       	ldd	r25, Z+5	; 0x05
    1870:	8c 93       	st	X, r24
		TCCR0 = (1 << FOC0) | (config->mode <<3) | (config->prescaler);
    1872:	a3 e5       	ldi	r26, 0x53	; 83
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e9 81       	ldd	r30, Y+1	; 0x01
    1878:	fa 81       	ldd	r31, Y+2	; 0x02
    187a:	81 81       	ldd	r24, Z+1	; 0x01
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	98 2f       	mov	r25, r24
    188e:	90 68       	ori	r25, 0x80	; 128
    1890:	e9 81       	ldd	r30, Y+1	; 0x01
    1892:	fa 81       	ldd	r31, Y+2	; 0x02
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	89 2b       	or	r24, r25
    1898:	8c 93       	st	X, r24
		/*we add one to avoid adding any conditions to check
		 * OVF 00 + 1 = 01
		 * CMP 01 + 1 = 10 */
		TIMSK |= (config->mode + 1);
    189a:	a9 e5       	ldi	r26, 0x59	; 89
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e9 e5       	ldi	r30, 0x59	; 89
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	98 2f       	mov	r25, r24
    18a6:	e9 81       	ldd	r30, Y+1	; 0x01
    18a8:	fa 81       	ldd	r31, Y+2	; 0x02
    18aa:	81 81       	ldd	r24, Z+1	; 0x01
    18ac:	8f 5f       	subi	r24, 0xFF	; 255
    18ae:	89 2b       	or	r24, r25
    18b0:	8c 93       	st	X, r24
    18b2:	8b c0       	rjmp	.+278    	; 0x19ca <TIMER_init+0x18c>
	}

	else if(TIMER1 == config->timer)
    18b4:	e9 81       	ldd	r30, Y+1	; 0x01
    18b6:	fa 81       	ldd	r31, Y+2	; 0x02
    18b8:	80 81       	ld	r24, Z
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <TIMER_init+0x82>
    18be:	42 c0       	rjmp	.+132    	; 0x1944 <TIMER_init+0x106>
	{
		TCNT1 = config->init_val;
    18c0:	ac e4       	ldi	r26, 0x4C	; 76
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	11 96       	adiw	r26, 0x01	; 1
    18ce:	9c 93       	st	X, r25
    18d0:	8e 93       	st	-X, r24
		OCR1A = config->comp_val;
    18d2:	aa e4       	ldi	r26, 0x4A	; 74
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	84 81       	ldd	r24, Z+4	; 0x04
    18dc:	95 81       	ldd	r25, Z+5	; 0x05
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	9c 93       	st	X, r25
    18e2:	8e 93       	st	-X, r24
		TCCR1A = (1 << FOC1A);
    18e4:	ef e4       	ldi	r30, 0x4F	; 79
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	88 e0       	ldi	r24, 0x08	; 8
    18ea:	80 83       	st	Z, r24
		TCCR1B = (config->mode <<3) | (config->prescaler);
    18ec:	ae e4       	ldi	r26, 0x4E	; 78
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	81 81       	ldd	r24, Z+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	98 2f       	mov	r25, r24
    1908:	e9 81       	ldd	r30, Y+1	; 0x01
    190a:	fa 81       	ldd	r31, Y+2	; 0x02
    190c:	86 81       	ldd	r24, Z+6	; 0x06
    190e:	89 2b       	or	r24, r25
    1910:	8c 93       	st	X, r24
		//find a better way
		if(config->mode & 1)
    1912:	e9 81       	ldd	r30, Y+1	; 0x01
    1914:	fa 81       	ldd	r31, Y+2	; 0x02
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	81 70       	andi	r24, 0x01	; 1
    191e:	90 70       	andi	r25, 0x00	; 0
    1920:	88 23       	and	r24, r24
    1922:	41 f0       	breq	.+16     	; 0x1934 <TIMER_init+0xf6>
			TIMSK |= (1 << OCIE1A);
    1924:	a9 e5       	ldi	r26, 0x59	; 89
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e9 e5       	ldi	r30, 0x59	; 89
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	80 61       	ori	r24, 0x10	; 16
    1930:	8c 93       	st	X, r24
    1932:	4b c0       	rjmp	.+150    	; 0x19ca <TIMER_init+0x18c>
		else
			TIMSK |= (1 << TOIE1);
    1934:	a9 e5       	ldi	r26, 0x59	; 89
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e9 e5       	ldi	r30, 0x59	; 89
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	84 60       	ori	r24, 0x04	; 4
    1940:	8c 93       	st	X, r24
    1942:	43 c0       	rjmp	.+134    	; 0x19ca <TIMER_init+0x18c>

	}
	else if(TIMER2 == config->timer)
    1944:	e9 81       	ldd	r30, Y+1	; 0x01
    1946:	fa 81       	ldd	r31, Y+2	; 0x02
    1948:	80 81       	ld	r24, Z
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	f1 f5       	brne	.+124    	; 0x19ca <TIMER_init+0x18c>
	{
		TCNT2 = config->init_val;
    194e:	a4 e4       	ldi	r26, 0x44	; 68
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e9 81       	ldd	r30, Y+1	; 0x01
    1954:	fa 81       	ldd	r31, Y+2	; 0x02
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	8c 93       	st	X, r24
		OCR2 = config->comp_val;
    195c:	a3 e4       	ldi	r26, 0x43	; 67
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	84 81       	ldd	r24, Z+4	; 0x04
    1966:	95 81       	ldd	r25, Z+5	; 0x05
    1968:	8c 93       	st	X, r24
		TCCR2 |= (FOC2) | (config->mode << 3) | (config->prescaler);
    196a:	a5 e4       	ldi	r26, 0x45	; 69
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e5 e4       	ldi	r30, 0x45	; 69
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	e9 81       	ldd	r30, Y+1	; 0x01
    1978:	fa 81       	ldd	r31, Y+2	; 0x02
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	98 2f       	mov	r25, r24
    198e:	97 60       	ori	r25, 0x07	; 7
    1990:	e9 81       	ldd	r30, Y+1	; 0x01
    1992:	fa 81       	ldd	r31, Y+2	; 0x02
    1994:	86 81       	ldd	r24, Z+6	; 0x06
    1996:	89 2b       	or	r24, r25
    1998:	82 2b       	or	r24, r18
    199a:	8c 93       	st	X, r24
		/*we add one to avoid adding any conditions to check
		 * OVF 00 + 1 = 01
		 * CMP 01 + 1 = 10
		 * shifted by 6 as the TIMSK register is different in timer2*/
		TIMSK |= ((config->mode + 1) << 6);
    199c:	a9 e5       	ldi	r26, 0x59	; 89
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e9 e5       	ldi	r30, 0x59	; 89
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	28 2f       	mov	r18, r24
    19a8:	e9 81       	ldd	r30, Y+1	; 0x01
    19aa:	fa 81       	ldd	r31, Y+2	; 0x02
    19ac:	81 81       	ldd	r24, Z+1	; 0x01
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	00 24       	eor	r0, r0
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	07 94       	ror	r0
    19bc:	96 95       	lsr	r25
    19be:	87 95       	ror	r24
    19c0:	07 94       	ror	r0
    19c2:	98 2f       	mov	r25, r24
    19c4:	80 2d       	mov	r24, r0
    19c6:	82 2b       	or	r24, r18
    19c8:	8c 93       	st	X, r24
	}
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <TIMER_setCallBack>:

/*Function used to set the call back function that will be used later by the ISRS*/
void TIMER_setCallBack(timer_id timer,timer_mode mode ,void (*func_ptr)(void))
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <TIMER_setCallBack+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <TIMER_setCallBack+0x8>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <TIMER_setCallBack+0xa>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	6a 83       	std	Y+2, r22	; 0x02
    19e6:	5c 83       	std	Y+4, r21	; 0x04
    19e8:	4b 83       	std	Y+3, r20	; 0x03
	/*Check for each timer then check the mode to assign the correct call back function for each*/
	switch(timer)
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3e 83       	std	Y+6, r19	; 0x06
    19f2:	2d 83       	std	Y+5, r18	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	d1 f0       	breq	.+52     	; 0x1a32 <TIMER_setCallBack+0x5e>
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	31 f1       	breq	.+76     	; 0x1a54 <TIMER_setCallBack+0x80>
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	91 f5       	brne	.+100    	; 0x1a74 <TIMER_setCallBack+0xa0>
	{
	case 0:
		if(NORM == mode)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	88 23       	and	r24, r24
    1a14:	39 f4       	brne	.+14     	; 0x1a24 <TIMER_setCallBack+0x50>
			OVF0_ptr = func_ptr;
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	90 93 71 00 	sts	0x0071, r25
    1a1e:	80 93 70 00 	sts	0x0070, r24
    1a22:	28 c0       	rjmp	.+80     	; 0x1a74 <TIMER_setCallBack+0xa0>
		else
			CMP0_ptr = func_ptr;
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	90 93 73 00 	sts	0x0073, r25
    1a2c:	80 93 72 00 	sts	0x0072, r24
    1a30:	21 c0       	rjmp	.+66     	; 0x1a74 <TIMER_setCallBack+0xa0>
		break;
	case 1:
		if(NORM == mode)
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 23       	and	r24, r24
    1a36:	39 f4       	brne	.+14     	; 0x1a46 <TIMER_setCallBack+0x72>
			OVF1_ptr = func_ptr;
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	90 93 75 00 	sts	0x0075, r25
    1a40:	80 93 74 00 	sts	0x0074, r24
    1a44:	17 c0       	rjmp	.+46     	; 0x1a74 <TIMER_setCallBack+0xa0>
		else
			CMP1_ptr = func_ptr;
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	90 93 77 00 	sts	0x0077, r25
    1a4e:	80 93 76 00 	sts	0x0076, r24
    1a52:	10 c0       	rjmp	.+32     	; 0x1a74 <TIMER_setCallBack+0xa0>
		break;
	case 2:
		if(NORM == mode)
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	88 23       	and	r24, r24
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <TIMER_setCallBack+0x94>
			OVF2_ptr = func_ptr;
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	90 93 79 00 	sts	0x0079, r25
    1a62:	80 93 78 00 	sts	0x0078, r24
    1a66:	06 c0       	rjmp	.+12     	; 0x1a74 <TIMER_setCallBack+0xa0>
		else
			CMP2_ptr = func_ptr;
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	90 93 7b 00 	sts	0x007B, r25
    1a70:	80 93 7a 00 	sts	0x007A, r24
		break;
	}
}
    1a74:	26 96       	adiw	r28, 0x06	; 6
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <TIMER_deInit>:

void TIMER_deInit(timer_id timer)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	0f 92       	push	r0
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
	if(TIMER0 == timer)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	88 23       	and	r24, r24
    1a96:	41 f4       	brne	.+16     	; 0x1aa8 <TIMER_deInit+0x22>
		TIMSK &= 0xFC;
    1a98:	a9 e5       	ldi	r26, 0x59	; 89
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e9 e5       	ldi	r30, 0x59	; 89
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8c 7f       	andi	r24, 0xFC	; 252
    1aa4:	8c 93       	st	X, r24
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <TIMER_deInit+0x4c>

	else if(TIMER1 == timer)
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	81 30       	cpi	r24, 0x01	; 1
    1aac:	41 f4       	brne	.+16     	; 0x1abe <TIMER_deInit+0x38>
		TIMSK &= 0xC3;
    1aae:	a9 e5       	ldi	r26, 0x59	; 89
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e9 e5       	ldi	r30, 0x59	; 89
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	83 7c       	andi	r24, 0xC3	; 195
    1aba:	8c 93       	st	X, r24
    1abc:	0a c0       	rjmp	.+20     	; 0x1ad2 <TIMER_deInit+0x4c>

	else if(TIMER2 == timer)
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	82 30       	cpi	r24, 0x02	; 2
    1ac2:	39 f4       	brne	.+14     	; 0x1ad2 <TIMER_deInit+0x4c>
		TIMSK &= 0x3F;
    1ac4:	a9 e5       	ldi	r26, 0x59	; 89
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e9 e5       	ldi	r30, 0x59	; 89
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8f 73       	andi	r24, 0x3F	; 63
    1ad0:	8c 93       	st	X, r24
}
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <__vector_19>:

/*six ISRs as each timer has two ISRs for overflow and compare modes*/

ISR(TIMER0_COMP_vect)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
	if(CMP0_ptr != NULL_PTR)
    1b04:	80 91 72 00 	lds	r24, 0x0072
    1b08:	90 91 73 00 	lds	r25, 0x0073
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	29 f0       	breq	.+10     	; 0x1b1a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*CMP0_ptr)();
    1b10:	e0 91 72 00 	lds	r30, 0x0072
    1b14:	f0 91 73 00 	lds	r31, 0x0073
    1b18:	09 95       	icall
	}
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 90       	pop	r0
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	0f 90       	pop	r0
    1b3c:	1f 90       	pop	r1
    1b3e:	18 95       	reti

00001b40 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
    1b40:	1f 92       	push	r1
    1b42:	0f 92       	push	r0
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	0f 92       	push	r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	2f 93       	push	r18
    1b4c:	3f 93       	push	r19
    1b4e:	4f 93       	push	r20
    1b50:	5f 93       	push	r21
    1b52:	6f 93       	push	r22
    1b54:	7f 93       	push	r23
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
    1b5e:	ef 93       	push	r30
    1b60:	ff 93       	push	r31
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
	if(OVF0_ptr != NULL_PTR)
    1b6a:	80 91 70 00 	lds	r24, 0x0070
    1b6e:	90 91 71 00 	lds	r25, 0x0071
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*OVF0_ptr)();
    1b76:	e0 91 70 00 	lds	r30, 0x0070
    1b7a:	f0 91 71 00 	lds	r31, 0x0071
    1b7e:	09 95       	icall
	}
}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	ff 91       	pop	r31
    1b86:	ef 91       	pop	r30
    1b88:	bf 91       	pop	r27
    1b8a:	af 91       	pop	r26
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	7f 91       	pop	r23
    1b92:	6f 91       	pop	r22
    1b94:	5f 91       	pop	r21
    1b96:	4f 91       	pop	r20
    1b98:	3f 91       	pop	r19
    1b9a:	2f 91       	pop	r18
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	if(CMP1_ptr != NULL_PTR)
    1bd0:	80 91 76 00 	lds	r24, 0x0076
    1bd4:	90 91 77 00 	lds	r25, 0x0077
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	29 f0       	breq	.+10     	; 0x1be6 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*CMP1_ptr)();
    1bdc:	e0 91 76 00 	lds	r30, 0x0076
    1be0:	f0 91 77 00 	lds	r31, 0x0077
    1be4:	09 95       	icall
	}
}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	0f 90       	pop	r0
    1c08:	1f 90       	pop	r1
    1c0a:	18 95       	reti

00001c0c <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1c0c:	1f 92       	push	r1
    1c0e:	0f 92       	push	r0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	0f 92       	push	r0
    1c14:	11 24       	eor	r1, r1
    1c16:	2f 93       	push	r18
    1c18:	3f 93       	push	r19
    1c1a:	4f 93       	push	r20
    1c1c:	5f 93       	push	r21
    1c1e:	6f 93       	push	r22
    1c20:	7f 93       	push	r23
    1c22:	8f 93       	push	r24
    1c24:	9f 93       	push	r25
    1c26:	af 93       	push	r26
    1c28:	bf 93       	push	r27
    1c2a:	ef 93       	push	r30
    1c2c:	ff 93       	push	r31
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	if(OVF1_ptr != NULL_PTR)
    1c36:	80 91 74 00 	lds	r24, 0x0074
    1c3a:	90 91 75 00 	lds	r25, 0x0075
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	29 f0       	breq	.+10     	; 0x1c4c <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*OVF1_ptr)();
    1c42:	e0 91 74 00 	lds	r30, 0x0074
    1c46:	f0 91 75 00 	lds	r31, 0x0075
    1c4a:	09 95       	icall
	}
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	ff 91       	pop	r31
    1c52:	ef 91       	pop	r30
    1c54:	bf 91       	pop	r27
    1c56:	af 91       	pop	r26
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	7f 91       	pop	r23
    1c5e:	6f 91       	pop	r22
    1c60:	5f 91       	pop	r21
    1c62:	4f 91       	pop	r20
    1c64:	3f 91       	pop	r19
    1c66:	2f 91       	pop	r18
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1c72:	1f 92       	push	r1
    1c74:	0f 92       	push	r0
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	0f 92       	push	r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	2f 93       	push	r18
    1c7e:	3f 93       	push	r19
    1c80:	4f 93       	push	r20
    1c82:	5f 93       	push	r21
    1c84:	6f 93       	push	r22
    1c86:	7f 93       	push	r23
    1c88:	8f 93       	push	r24
    1c8a:	9f 93       	push	r25
    1c8c:	af 93       	push	r26
    1c8e:	bf 93       	push	r27
    1c90:	ef 93       	push	r30
    1c92:	ff 93       	push	r31
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	if(CMP2_ptr != NULL_PTR)
    1c9c:	80 91 7a 00 	lds	r24, 0x007A
    1ca0:	90 91 7b 00 	lds	r25, 0x007B
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*CMP2_ptr)();
    1ca8:	e0 91 7a 00 	lds	r30, 0x007A
    1cac:	f0 91 7b 00 	lds	r31, 0x007B
    1cb0:	09 95       	icall
	}
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	OVF2_ptr();
    1d02:	e0 91 78 00 	lds	r30, 0x0078
    1d06:	f0 91 79 00 	lds	r31, 0x0079
    1d0a:	09 95       	icall
}
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	ff 91       	pop	r31
    1d12:	ef 91       	pop	r30
    1d14:	bf 91       	pop	r27
    1d16:	af 91       	pop	r26
    1d18:	9f 91       	pop	r25
    1d1a:	8f 91       	pop	r24
    1d1c:	7f 91       	pop	r23
    1d1e:	6f 91       	pop	r22
    1d20:	5f 91       	pop	r21
    1d22:	4f 91       	pop	r20
    1d24:	3f 91       	pop	r19
    1d26:	2f 91       	pop	r18
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	0f 90       	pop	r0
    1d2e:	1f 90       	pop	r1
    1d30:	18 95       	reti

00001d32 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(twi_config* config)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <TWI_init+0x6>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	/*TWSR and TWBR are both constants adjusted by the user to ensure the desired frequency*/
	TWBR = config->bit_rate;
    1d40:	a0 e2       	ldi	r26, 0x20	; 32
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e9 81       	ldd	r30, Y+1	; 0x01
    1d46:	fa 81       	ldd	r31, Y+2	; 0x02
    1d48:	80 81       	ld	r24, Z
    1d4a:	8c 93       	st	X, r24
	/*TWBR = 0x02;*/
	TWSR = 0x00;
    1d4c:	e1 e2       	ldi	r30, 0x21	; 33
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	10 82       	st	Z, r1
	/* Two Wire Bus address, my address if any master device want to call me: 0x1
	   (used in case this MC is a slave device) General Call Recognition: Off */
	TWAR = config->address;
    1d52:	a2 e2       	ldi	r26, 0x22	; 34
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	81 81       	ldd	r24, Z+1	; 0x01
    1d5c:	8c 93       	st	X, r24
/*	TWAR = 0b00000010;*/

	/*Enable TWI*/
	TWCR = (1 << TWEN );
    1d5e:	e6 e5       	ldi	r30, 0x56	; 86
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	80 83       	st	Z, r24




}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <TWI_start>:

void TWI_start(void)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1d78:	e6 e5       	ldi	r30, 0x56	; 86
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	84 ea       	ldi	r24, 0xA4	; 164
    1d7e:	80 83       	st	Z, r24

	 /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    1d80:	e6 e5       	ldi	r30, 0x56	; 86
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	88 23       	and	r24, r24
    1d88:	dc f7       	brge	.-10     	; 0x1d80 <TWI_start+0x10>
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <TWI_stop>:

void TWI_stop(void)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1d98:	e6 e5       	ldi	r30, 0x56	; 86
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	84 e9       	ldi	r24, 0x94	; 148
    1d9e:	80 83       	st	Z, r24
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	0f 92       	push	r0
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1db2:	e3 e2       	ldi	r30, 0x23	; 35
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1dba:	e6 e5       	ldi	r30, 0x56	; 86
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	84 e8       	ldi	r24, 0x84	; 132
    1dc0:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1dc2:	e6 e5       	ldi	r30, 0x56	; 86
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	dc f7       	brge	.-10     	; 0x1dc2 <TWI_writeByte+0x1c>
}
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK()
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	 TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ddc:	e6 e5       	ldi	r30, 0x56	; 86
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	84 ec       	ldi	r24, 0xC4	; 196
    1de2:	80 83       	st	Z, r24
	 /* Wait for TWINT flag set in TWCR Register (data received successfully) */
	 while(BIT_IS_CLEAR(TWCR, TWINT));
    1de4:	e6 e5       	ldi	r30, 0x56	; 86
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	88 23       	and	r24, r24
    1dec:	dc f7       	brge	.-10     	; 0x1de4 <TWI_readByteWithACK+0x10>
	 /* Read Data */
	 return TWDR;
    1dee:	e3 e2       	ldi	r30, 0x23	; 35
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK()
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1e02:	e6 e5       	ldi	r30, 0x56	; 86
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	84 e8       	ldi	r24, 0x84	; 132
    1e08:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1e0a:	e6 e5       	ldi	r30, 0x56	; 86
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 23       	and	r24, r24
    1e12:	dc f7       	brge	.-10     	; 0x1e0a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e14:	e3 e2       	ldi	r30, 0x23	; 35
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
}
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	0f 92       	push	r0
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e2a:	e1 e2       	ldi	r30, 0x21	; 33
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 7f       	andi	r24, 0xF8	; 248
    1e32:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the UART */
void UART_init(const UART_Config* s_ConfigData)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <UART_init+0x6>
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <UART_init+0x8>
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9c 83       	std	Y+4, r25	; 0x04
    1e4c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1e4e:	1a 82       	std	Y+2, r1	; 0x02
    1e50:	19 82       	std	Y+1, r1	; 0x01
	/* Double-speed mode */
	UCSRA = (1<<U2X);
    1e52:	eb e2       	ldi	r30, 0x2B	; 43
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	80 83       	st	Z, r24
	/* Enable Tx and Rx
	 * Disable interrupts
	 */
	UCSRB = (1<<TXEN) | (1<<RXEN);
    1e5a:	ea e2       	ldi	r30, 0x2A	; 42
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	88 e1       	ldi	r24, 0x18	; 24
    1e60:	80 83       	st	Z, r24
	/* In case of 9-bit mode the set the UCSZ2 bit in the UCSRB register */
	UCSRB = (UCSRB & 0xFB) | (s_ConfigData->num_bits);
    1e62:	aa e2       	ldi	r26, 0x2A	; 42
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	ea e2       	ldi	r30, 0x2A	; 42
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	9b 7f       	andi	r25, 0xFB	; 251
    1e70:	eb 81       	ldd	r30, Y+3	; 0x03
    1e72:	fc 81       	ldd	r31, Y+4	; 0x04
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	89 2b       	or	r24, r25
    1e78:	8c 93       	st	X, r24
	/* Set the URSEL bit when writing in UCSRC register */
	UCSRC = (1<<URSEL);
    1e7a:	e0 e4       	ldi	r30, 0x40	; 64
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	80 83       	st	Z, r24
	 * 6-Bit mode
	 * 7-Bit mode
	 * 8-Bit mode
	 * 9-Bit mode
	 */
	UCSRC = (UCSRC & 0xF9) | ((s_ConfigData->num_bits)<<1);
    1e82:	a0 e4       	ldi	r26, 0x40	; 64
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e0 e4       	ldi	r30, 0x40	; 64
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	29 7f       	andi	r18, 0xF9	; 249
    1e90:	eb 81       	ldd	r30, Y+3	; 0x03
    1e92:	fc 81       	ldd	r31, Y+4	; 0x04
    1e94:	81 81       	ldd	r24, Z+1	; 0x01
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	82 2b       	or	r24, r18
    1ea0:	8c 93       	st	X, r24
	/* Insert the number of parity bits required
	 * Parity disabled
	 * Even Parity
	 * Odd parity
	 */
	UCSRC = (UCSRC & 0xCF) | ((s_ConfigData->parity_bit)<<4);
    1ea2:	a0 e4       	ldi	r26, 0x40	; 64
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e0 e4       	ldi	r30, 0x40	; 64
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	28 2f       	mov	r18, r24
    1eae:	2f 7c       	andi	r18, 0xCF	; 207
    1eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	88 2f       	mov	r24, r24
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	82 95       	swap	r24
    1ebc:	92 95       	swap	r25
    1ebe:	90 7f       	andi	r25, 0xF0	; 240
    1ec0:	98 27       	eor	r25, r24
    1ec2:	80 7f       	andi	r24, 0xF0	; 240
    1ec4:	98 27       	eor	r25, r24
    1ec6:	82 2b       	or	r24, r18
    1ec8:	8c 93       	st	X, r24
	/* Insert the number of stop bits required
	 * 1 stop bit
	 * 2 stop bits
	 */
	UCSRC = (UCSRC & 0xF7) | ((s_ConfigData->stop_bits)<<3);
    1eca:	a0 e4       	ldi	r26, 0x40	; 64
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e0 e4       	ldi	r30, 0x40	; 64
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	27 7f       	andi	r18, 0xF7	; 247
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	80 81       	ld	r24, Z
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 2b       	or	r24, r18
    1ef0:	8c 93       	st	X, r24
	/* Calculate UBBR value according to the given baud_rate */
	ubrr_value = (uint16)((F_CPU / (s_ConfigData->baud_rate * 8UL)) - 1);
    1ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef6:	83 81       	ldd	r24, Z+3	; 0x03
    1ef8:	94 81       	ldd	r25, Z+4	; 0x04
    1efa:	a5 81       	ldd	r26, Z+5	; 0x05
    1efc:	b6 81       	ldd	r27, Z+6	; 0x06
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	aa 1f       	adc	r26, r26
    1f04:	bb 1f       	adc	r27, r27
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	aa 1f       	adc	r26, r26
    1f14:	bb 1f       	adc	r27, r27
    1f16:	9c 01       	movw	r18, r24
    1f18:	ad 01       	movw	r20, r26
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	92 e1       	ldi	r25, 0x12	; 18
    1f1e:	aa e7       	ldi	r26, 0x7A	; 122
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodsi4>
    1f2a:	da 01       	movw	r26, r20
    1f2c:	c9 01       	movw	r24, r18
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
	/* Insert first 8-bits in the UBRRL register and the rest in the UBRRH register */
	UBRRL = ubrr_value;
    1f34:	e9 e2       	ldi	r30, 0x29	; 41
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	80 83       	st	Z, r24
	UBRRH = ubrr_value>>8;
    1f3c:	e0 e4       	ldi	r30, 0x40	; 64
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	89 2f       	mov	r24, r25
    1f46:	99 27       	eor	r25, r25
    1f48:	80 83       	st	Z, r24
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <UART_sendByte>:

/* Function to send a byte to another device*/
void UART_sendByte(uint8 data)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until the UDR is empty and ready to send a byte */
	while(BIT_IS_CLEAR(UCSRA, UDRE)) {}
    1f64:	eb e2       	ldi	r30, 0x2B	; 43
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	80 72       	andi	r24, 0x20	; 32
    1f70:	90 70       	andi	r25, 0x00	; 0
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	b9 f3       	breq	.-18     	; 0x1f64 <UART_sendByte+0xc>
	UDR = data;
    1f76:	ec e2       	ldi	r30, 0x2C	; 44
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	80 83       	st	Z, r24
}
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <UART_receiveByte>:

/* Function to receive a byte from another device*/
uint8 UART_receiveByte(void)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
	/* Wait until receiving is complete */
	while(BIT_IS_CLEAR(UCSRA, RXC)) {}
    1f8e:	eb e2       	ldi	r30, 0x2B	; 43
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	dc f7       	brge	.-10     	; 0x1f8e <UART_receiveByte+0x8>
	return UDR;
    1f98:	ec e2       	ldi	r30, 0x2C	; 44
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <UART_sendString>:

/* Function to send a string to another device*/
void UART_sendString(const char *str)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <UART_sendString+0x6>
    1faa:	0f 92       	push	r0
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	9b 83       	std	Y+3, r25	; 0x03
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
    1fb6:	0e c0       	rjmp	.+28     	; 0x1fd4 <UART_sendString+0x30>
	while(str[i] != '\0')
	{
		UART_sendByte(str[i]);
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	80 81       	ld	r24, Z
    1fca:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <UART_sendByte>
		i++;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	8f 5f       	subi	r24, 0xFF	; 255
    1fd2:	89 83       	std	Y+1, r24	; 0x01

/* Function to send a string to another device*/
void UART_sendString(const char *str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	fc 01       	movw	r30, r24
    1fe0:	e2 0f       	add	r30, r18
    1fe2:	f3 1f       	adc	r31, r19
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 23       	and	r24, r24
    1fe8:	39 f7       	brne	.-50     	; 0x1fb8 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <UART_receiveString>:

/*Function to receive a string from another device*/
void UART_receiveString(char *str)
{
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <UART_receiveString+0xa>
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9b 83       	std	Y+3, r25	; 0x03
    2008:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    200a:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '#'
	 */
	str[i] = UART_receiveByte();
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	9b 81       	ldd	r25, Y+3	; 0x03
    2016:	8c 01       	movw	r16, r24
    2018:	02 0f       	add	r16, r18
    201a:	13 1f       	adc	r17, r19
    201c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <UART_receiveByte>
    2020:	f8 01       	movw	r30, r16
    2022:	80 83       	st	Z, r24
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <UART_receiveString+0x4e>
	/* Receive until '#' is pressed */
	while(str[i] != '#')
	{
		i++;
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	8c 01       	movw	r16, r24
    2038:	02 0f       	add	r16, r18
    203a:	13 1f       	adc	r17, r19
    203c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <UART_receiveByte>
    2040:	f8 01       	movw	r30, r16
    2042:	80 83       	st	Z, r24
	/* Receive the first byte only to be able to check for the special Character
	 * which determines the end of the string which is '#'
	 */
	str[i] = UART_receiveByte();
	/* Receive until '#' is pressed */
	while(str[i] != '#')
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	fc 01       	movw	r30, r24
    2050:	e2 0f       	add	r30, r18
    2052:	f3 1f       	adc	r31, r19
    2054:	80 81       	ld	r24, Z
    2056:	83 32       	cpi	r24, 0x23	; 35
    2058:	31 f7       	brne	.-52     	; 0x2026 <UART_receiveString+0x30>
	{
		i++;
		str[i] = UART_receiveByte();
	}
	/* Terminate the string with null terminator to indicate the end of the string */
	str[i] = '\0';
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	fc 01       	movw	r30, r24
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	10 82       	st	Z, r1
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	08 95       	ret

0000207c <__udivmodsi4>:
    207c:	a1 e2       	ldi	r26, 0x21	; 33
    207e:	1a 2e       	mov	r1, r26
    2080:	aa 1b       	sub	r26, r26
    2082:	bb 1b       	sub	r27, r27
    2084:	fd 01       	movw	r30, r26
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <__udivmodsi4_ep>

00002088 <__udivmodsi4_loop>:
    2088:	aa 1f       	adc	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	ee 1f       	adc	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	a2 17       	cp	r26, r18
    2092:	b3 07       	cpc	r27, r19
    2094:	e4 07       	cpc	r30, r20
    2096:	f5 07       	cpc	r31, r21
    2098:	20 f0       	brcs	.+8      	; 0x20a2 <__udivmodsi4_ep>
    209a:	a2 1b       	sub	r26, r18
    209c:	b3 0b       	sbc	r27, r19
    209e:	e4 0b       	sbc	r30, r20
    20a0:	f5 0b       	sbc	r31, r21

000020a2 <__udivmodsi4_ep>:
    20a2:	66 1f       	adc	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	88 1f       	adc	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	1a 94       	dec	r1
    20ac:	69 f7       	brne	.-38     	; 0x2088 <__udivmodsi4_loop>
    20ae:	60 95       	com	r22
    20b0:	70 95       	com	r23
    20b2:	80 95       	com	r24
    20b4:	90 95       	com	r25
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	bd 01       	movw	r22, r26
    20bc:	cf 01       	movw	r24, r30
    20be:	08 95       	ret

000020c0 <__prologue_saves__>:
    20c0:	2f 92       	push	r2
    20c2:	3f 92       	push	r3
    20c4:	4f 92       	push	r4
    20c6:	5f 92       	push	r5
    20c8:	6f 92       	push	r6
    20ca:	7f 92       	push	r7
    20cc:	8f 92       	push	r8
    20ce:	9f 92       	push	r9
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	ca 1b       	sub	r28, r26
    20ea:	db 0b       	sbc	r29, r27
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	09 94       	ijmp

000020f8 <__epilogue_restores__>:
    20f8:	2a 88       	ldd	r2, Y+18	; 0x12
    20fa:	39 88       	ldd	r3, Y+17	; 0x11
    20fc:	48 88       	ldd	r4, Y+16	; 0x10
    20fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2100:	6e 84       	ldd	r6, Y+14	; 0x0e
    2102:	7d 84       	ldd	r7, Y+13	; 0x0d
    2104:	8c 84       	ldd	r8, Y+12	; 0x0c
    2106:	9b 84       	ldd	r9, Y+11	; 0x0b
    2108:	aa 84       	ldd	r10, Y+10	; 0x0a
    210a:	b9 84       	ldd	r11, Y+9	; 0x09
    210c:	c8 84       	ldd	r12, Y+8	; 0x08
    210e:	df 80       	ldd	r13, Y+7	; 0x07
    2110:	ee 80       	ldd	r14, Y+6	; 0x06
    2112:	fd 80       	ldd	r15, Y+5	; 0x05
    2114:	0c 81       	ldd	r16, Y+4	; 0x04
    2116:	1b 81       	ldd	r17, Y+3	; 0x03
    2118:	aa 81       	ldd	r26, Y+2	; 0x02
    211a:	b9 81       	ldd	r27, Y+1	; 0x01
    211c:	ce 0f       	add	r28, r30
    211e:	d1 1d       	adc	r29, r1
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	ed 01       	movw	r28, r26
    212c:	08 95       	ret

0000212e <_exit>:
    212e:	f8 94       	cli

00002130 <__stop_program>:
    2130:	ff cf       	rjmp	.-2      	; 0x2130 <__stop_program>
